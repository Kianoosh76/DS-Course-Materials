<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="11" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <Course>
          <option name="authors">
            <list>
              <StepikUserInfo>
                <option name="firstName" value="kianooshabbasi" />
                <option name="guest" value="false" />
                <option name="id" value="-1" />
                <option name="lastName" value="" />
              </StepikUserInfo>
            </list>
          </option>
          <option name="courseMode" value="Course Creator" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="Jupyter Notebooks and Pycharm Edu educational tasks of Dr Sharifi's `Data Structures and Algorithms` course at Sharif University of Technology, Computer Engineering Department." />
          <option name="fromZip" value="false" />
          <option name="index" value="-1" />
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="name" value="DS-Course-Materials" />
          <option name="stepikChangeStatus" value="Content changed" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="1_Python" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Python Practice" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="2" />
                <option name="name" value="2_Sorting" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Sorting Algorithms" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Sorting Algorithms Comparison" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Quick Sort" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="3" />
                <option name="name" value="3_Complexity Analysis" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Prerequisite: &lt;br&gt;&#10;Read the complexity analysis notebook.&lt;br&gt;&lt;br&gt;&#10;&#10;Complete the answers&#10;&lt;br&gt;&#10;&#10;&lt;div&gt;&#10;  &lt;h3&gt;Question1&lt;/h3&gt;&#10;  &lt;strong&gt;&#10;    T(n) = T(n - 1) + log(n) * 100&#10;  &lt;br&gt;&#10;    1) &lt;i&gt; O(n ^ 2)&lt;/i&gt; &lt;/br&gt;&#10;    2) &lt;i&gt; O(n)&lt;/i&gt; &lt;/br&gt;&#10;    3) &lt;i&gt; O(n * log(n) ^ 2)&lt;/i&gt; &lt;/br&gt;&#10;    4) &lt;i&gt; O(n * log(n))&lt;/i&gt; &lt;/br&gt;&#10;  &lt;/strong&gt;&#10;  &lt;h3&gt;Question2&lt;/h3&gt;&#10;  &lt;strong&gt;&#10;    T(n) = T(sqrt(n)) * 2 + log(n)&#10;  &lt;br&gt;&#10;    1) &lt;i&gt; O(log(n))&lt;/i&gt; &lt;/br&gt;&#10;    2) &lt;i&gt; O(sqrt(n) * log(n))&lt;/i&gt; &lt;/br&gt;&#10;    3) &lt;i&gt; O(log(n) * log(log(n)))&lt;/i&gt; &lt;/br&gt;&#10;    4) &lt;i&gt; O(sqrt(n))&lt;/i&gt; &lt;/br&gt;&#10;  &lt;/strong&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Algorithms Complexity Analysis" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="4" />
                <option name="name" value="4_Basic Data Structures" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Basic Structures" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="5" />
                <option name="name" value="5_Trees" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Tree Storage - Traversal" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Trie" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="BST" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Heap" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="6" />
                <option name="name" value="6_Binary Search - K Select" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" value="Binary Search &amp; Lower Bound" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Binary Search   Lower Bound" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="K Select" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="7" />
                <option name="name" value="7_Hashing" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fa&quot; dir=&quot;rtl&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;یکی از روش‌های تشخیص ایرادات تایپی (typoها) در متون و پیشنهاد کلمه‌های جایگزین&#10;استفاده از جدول درهم‌ سازیست. در این سوال می‌خواهیم که یک مدل ساده برنامه spell checker&#10;را پیاده سازی کنیم.&lt;br&gt;&#10;شما باید پیاده سازی توابع setup و suggestions را کامل کنید. تابع setup&#10;یکبار در ابتدای برنامه صدا زده می‌شود و کل کلمات صحیح موجود در دیکشنری&#10;به عنوان ورودی به آن داده می‌شود. پس از صدا زدن تابع setup، با هر بار صدا زدن&#10;تابع suggestions این تابع باید یک دوتایی برگرداند که مقدار اول آن True است در صورتیکه&#10;تایپ کلمه صحیح باشد(کلمه در دیکشنری موجود باشد) و در غیر اینصورت false است.&#10;مقدار دوم این دوتایی درصورتی که در کلمه غلط نگراشی موجود نبود یک مجموعه تهی&#10;و در غیر این صورت مجموعه‌ای از کلمات مشابه آن کلمه است. یک کلمه مشابه کلمه‌ای است که نسبت&#10;به کلمه ورودی دقیقا یک کارکتر بیشتر یا دقیقا یک کاراکتر کمتر داشته باشد&#10;یا اگر تعداد کاراکترها یکی بود در دقیقا یک کارکتر متفاوت باشند.&#10;ترتیب کلمات در لیست خروجی اهمیتی ندارند. برای درک بهتر&#10;به مثال مراجعه کنید.&lt;br&gt;&lt;br&gt;&#10;مثال:&lt;br&gt;&#10;فرض کنید تابع setup با ورودی {'hello', 'bye', 'salaam', 'salam'} صدا زده شود&#10;سپس خروجی هرکدام از توابع زیر، به شکل زیر است.&lt;br&gt;&#10;&lt;div dir=&quot;ltr&quot;&gt;&#10;suggestions(&quot;bye&quot;)&lt;br&gt;&#10;suggestions(&quot;hallo&quot;)&lt;br&gt;&#10;suggestions(&quot;hablo&quot;)&lt;br&gt;&#10;suggestions(&quot;salaa&quot;)&lt;br&gt;&#10;suggestions(&quot;aye&quot;)&lt;br&gt;&#10;Output:&lt;br&gt;&#10;(True, set())&lt;br&gt;&#10;(False, {&quot;hello&quot;})&lt;br&gt;&#10;(False, set())&lt;br&gt;&#10;(False, {&quot;salaam&quot;, &quot;salam&quot;})&lt;br&gt;&#10;(False, {&quot;bye&quot;})&lt;br&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Task 1(Part 1)" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="43" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass" />
                                      <option name="possibleAnswer" value="global words&#10;    words = set(dictionary)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="57" />
                                      <option name="offset" value="113" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="result = set()&#10;&#9;is_legit = False&#10;&#9;return is_legit, result" />
                                      <option name="possibleAnswer" value="result = set()&#10;    is_legit = word in words&#10;    if not is_legit:&#10;        # add char&#10;        for i in range(len(word) + 1):&#10;            for char in string.ascii_lowercase:&#10;                possible = word[:i] + char + word[i:]&#10;                if possible in words:&#10;                    result.add(possible)&#10;        # remove char&#10;        for i in range(len(word)):&#10;            possible = word[:i] + word[i + 1:]&#10;            if possible in words:&#10;                result.add(possible)&#10;        # change char&#10;        for i in range(len(word)):&#10;            for char in string.ascii_lowercase:&#10;                possible = word[:i] + char + word[i + 1:]&#10;                if possible in words:&#10;                    result.add(possible)&#10;    return is_legit, result" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="time_limit.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="time_limit.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fa&quot; dir=&quot;rtl&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;تابع answer را کامل کنید. این تابع به عنوان ورودی یک آرایه از اعداد arr و&#10;یک عدد k را می‌گیرد و بررسی می‌کند که آیا ۴ عدد با اندیس‌های متمایز در آرایه وجود دارند&#10;که مجموعشان برابر k بشود یا خیر. در صورت وجود این ۴ عدد باید آن‌ها را به شکل&#10;یک ۴تایی برگردانید و اگر چنین ۴تایی وجود نداشت مقدار None را برگردانید. اگر بیش از یک ۴تایی&#10;وجود داشت یکی از آن‌ها را به دلخواه برگردانید.&lt;br&gt;&lt;br&gt;&#10;توجه:&lt;br&gt;&#10;در صورتی‌ که می‌خواهید از جدول درهم‌سازی استفاده کنید، باید پیاده سازی hash_table.py&#10;را کامل کرده و از آن استفاده کنید و نمی‌توانید از dictionary یا داده ساختارهای&#10;مشابه پایتون استفاده کنید.&lt;br&gt;&lt;br&gt;&#10;محدودیت‌ها:&lt;br&gt;&#10;اندازه آرایه arr از 3^10 بیشتر نیست&lt;br&gt;&#10;عناصر آرایه اعداد صحیح مثبت کمتر از 12^10 هستند&lt;br&gt;&lt;br&gt;&#10;مثال:&lt;br&gt;&#10;&lt;div dir=&quot;ltr&quot;&gt;&#10;answer([1, 2, 3, 4, 5], 12)&lt;br&gt;&#10;answer([1, 2, 3, 4], 20)&lt;br&gt;&#10;answer([1, 1, 1, 1, 1, 1], 4)&lt;br&gt;&#10;Output:&lt;br&gt;&#10;(1, 2, 4, 5)&lt;br&gt;&#10;None&lt;br&gt;&#10;(1, 1, 1, 1)&lt;br&gt;&#10;&lt;/div&gt;&#10;&lt;div class=&quot;Hint&quot;&gt;&#10;    یک الگوریتم بهینه برای این سوال می‌تواند در زمان (O(n^2 اجرا شود&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Task 2(Part 1)" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="hash_table.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="56" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass" />
                                      <option name="possibleAnswer" value="self._size = size&#10;        self._table = [[] for _ in range(size)]" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="157" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="return 0" />
                                      <option name="possibleAnswer" value="return key % self._size" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="224" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass" />
                                      <option name="possibleAnswer" value="key_hash = self._hash(key)&#10;        self._table[key_hash].append((key, value))" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="11" />
                                      <option name="offset" value="335" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="return None" />
                                      <option name="possibleAnswer" value="key_hash = self._hash(key)&#10;        for pair in self._table[key_hash]:&#10;            if key == pair[0]:&#10;                return pair[1]&#10;        return None" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hash_table.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="11" />
                                      <option name="offset" value="59" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="return None" />
                                      <option name="possibleAnswer" value="table = HashTable(1000003)&#10;    for i in range(len(arr)):&#10;        for j in range(i + 1, len(arr)):&#10;            pair = table.get(k - arr[i] - arr[j])&#10;            if pair is not None:&#10;                if i not in pair and j not in pair:&#10;                    return (arr[i], arr[j]) + (arr[pair[0]], arr[pair[1]])&#10;            table.insert(arr[i] + arr[j], (i, j))&#10;    return None" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="time_limit.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="time_limit.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fa&quot; dir=&quot;rtl&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;دوره تناوب یک دنباله seq برابر است با کوچک‌ترین عدد مثبت(نا صفر) T که به ازای هر&#10;&lt;div dir=&quot;ltr&quot;&gt;&#10;    i &lt; len(seq) - T&#10;&lt;/div&gt;&#10;داشته باشیم&#10;&lt;div dir=&quot;ltr&quot;&gt;&#10;    seq[i] = seq[i + T]&#10;&lt;/div&gt;&#10;تابع period را به گونه‌ای کامل کنید که به ازای هر رشته str دوره تناوب str را&#10;برگرداند. تضمین می‌شود که رشته ورودی دوره تناوبی کمتر از طولش دارد.&lt;br&gt;&lt;br&gt;&#10;محدودیت‌ها:&lt;br&gt;&#10;سایز رشته str بیشتر از 6^10 نیست&lt;br&gt;&#10;کاراکترهای رشته حروف lowercase انگلیسی هستند.&lt;br&gt;&lt;br&gt;&#10;مثال:&lt;br&gt;&#10;&lt;div dir=&quot;ltr&quot;&gt;&#10;    period(&quot;aabbaabb&quot;)&lt;br&gt;&#10;    period(&quot;aaa&quot;)&lt;br&gt;&#10;    Output:&lt;br&gt;&#10;    4&lt;br&gt;&#10;    1&lt;br&gt;&#10;&lt;/div&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;    با کمک درهم‌سازی می‌توانید مسئله را در زمان خطی حل کنید&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Task 3(Part 1)" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="21" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="return 0" />
                                      <option name="possibleAnswer" value="p, q = 27, 10**9 + 7&#10;    hash_list = hash(str, q, p)&#10;    offset = p&#10;    for T in range(1, len(str)):&#10;        if is_period(hash_list, T, offset, q):&#10;            return T&#10;        offset = (offset * p) % q&#10;    return 0" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="0" />
                                      <option name="offset" value="239" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="" />
                                      <option name="possibleAnswer" value="def is_period(hash_list, T, offset, q):&#10;    return (hash_list[len(hash_list) - T - 1] * offset) % q == (hash_list[len(hash_list) - 1] - hash_list[T - 1]) % q&#10;&#10;&#10;def hash(str, q, p):&#10;    hash_list = [ord(str[0]) - ord('a') + 1]&#10;    s = 1&#10;    for i in range(1, len(str)):&#10;        s = (s * p) % q&#10;        hash_list.append((hash_list[i - 1] + (ord(str[i]) - ord('a') + 1) * s) % q)&#10;    return hash_list" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="time_limit.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="time_limit.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fa&quot; dir=&quot;rtl&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;در این سوال می‌خواهیم با استفاده از داده‌ ساختار جدول درهم سازی یک LRU Cache پیاده&#10;سازی کنیم.&lt;br&gt;&#10;برای اینکار باید توابع کلاس LRU Cache را کامل کنید. هنگام ساخت LRU Cache یک عدد&#10;به عنوان اندازه آن (size) به سازنده آن پاس داده می‌شود. این cache به این شکل کار&#10;می‌کند که ابتدا به کمک add مقادیر را به صورت key-value در آن درج می‌کنیم و به کمک تابع get&#10;مقادیر متناظر با کلید‌هایی که قبلا درج کرده‌ایم را بازیابی می‌کنیم. هنگامی که cache&#10;پر شود آخرین داده استفاده شده یعنی داده‌ای که قبل از بقیه get یا add شده باشد پاک می‌شود.&#10;برای درک بهتر به مثال مراجعه کنید.&#10;&lt;br&gt;&lt;br&gt;&#10;شما باید سه تابع add, get و init کلاس LRUCache را به گونه‌ای پیاده سازی کنید که هر&#10; عملیات add و get به طور متوسط در زمان (۱)O قابل انجام باشد. تابع add کلید key و&#10;مقدار value را دریافت کرده و آن را در cache درج می‌کند. تابع get در صورتیکه کلید داده شده&#10;در cache موجود باشد value متناظر با آن را برمی‌گرداند و در غیر این صورت مقدار None&#10;را برمی‌گرداند. تابع init نیز یک LRUCache با سایز مشخص شده می‌سازد.&#10;&lt;br&gt;&lt;br&gt;&#10;نکته:&#10;&lt;br&gt;&#10;برای این سوال نیاز به پیاده سازی جدول درهم‌سازی دارید، خودتان این داده ساختار را در&#10;فایل hash_table.py پیاده سازی کنید. برای حل مشکل برخورد از روش آدرس‌دهی باز استفاده&#10;کنید.&#10;&lt;br&gt;&lt;br&gt;&#10;مثال:&#10;&lt;br&gt;&#10;&lt;div dir=&quot;ltr&quot;&gt;&#10;cache = LRUCache(3)&lt;br&gt;&#10;cache.add(23, 765)&lt;br&gt;&#10;cache.add(100, 100000)&lt;br&gt;&#10;cache.add(2, -309)&lt;br&gt;&#10;cache.get(23)&lt;br&gt;&#10;cache.get(2)&lt;br&gt;&#10;cache.put(0, 2)&lt;br&gt;&#10;print(cache.get(23))&lt;br&gt;&#10;print(cache.get(100))&lt;br&gt;&#10;print(cache.get(2))&lt;br&gt;&#10;print(cache.get(0))&lt;br&gt;&lt;br&gt;&#10;Output:&lt;br&gt;&#10;765&lt;br&gt;&#10;None&lt;br&gt;&#10;0398&lt;br&gt;&#10;2&lt;br&gt;&#10;&lt;/div&gt;&#10;&lt;div class=&quot;hint&quot; dir=&quot;rtl&quot;&gt;&#10;  قاعدتا برای پیاده سازی نیاز به صف هم دارید!&#10;&lt;/div&gt;&#10;&lt;div class=&quot;hint&quot; dir=&quot;rtl&quot;&gt;&#10;  دقت کنید برای اینکه عملیات get از مرتبه (۱)O باقی بماند باید ظرفیت&#10;    جدول در هم سازی به مراتب بیشتر از ظرفیت cache باشد.&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Task 4(Part 1)" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="hash_table.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="0" />
                                      <option name="offset" value="21" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="" />
                                      <option name="possibleAnswer" value="class _Cell:&#10;        def __init__(self, key: int, value: object) -&gt; None:&#10;            self._key = key&#10;            self._value = value&#10;            self._isDeleted = False&#10;&#10;        def get_key(self):&#10;            return self._key&#10;&#10;        def get_value(self):&#10;            return self._value&#10;&#10;        def is_deleted(self):&#10;            return self._isDeleted&#10;&#10;        def delete(self):&#10;            self._isDeleted = True" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="476" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass" />
                                      <option name="possibleAnswer" value="self._size = size&#10;        self._table = [None for _ in range(size)]" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="11" />
                                      <option name="offset" value="582" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="return None" />
                                      <option name="possibleAnswer" value="return (key + i) % self._size" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="655" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass" />
                                      <option name="possibleAnswer" value="for i in range(self._size):&#10;            cell: HashTable._Cell = self._table[self._hash(key, i)]&#10;            if cell is None or cell.is_deleted():&#10;                self._table[self._hash(key, i)] = HashTable._Cell(key, value)&#10;                return True&#10;        return False" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="964" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass" />
                                      <option name="possibleAnswer" value="for i in range(self._size):&#10;            cell: HashTable._Cell = self._table[self._hash(key, i)]&#10;            if cell is None:&#10;                break&#10;            if cell.get_key() == key:&#10;                cell.delete()&#10;                break" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="1234" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass" />
                                      <option name="possibleAnswer" value="for i in range(self._size):&#10;            cell: HashTable._Cell = self._table[self._hash(key, i)]&#10;            if cell is None:&#10;                return None&#10;            if not cell.is_deleted() and cell.get_key() == key:&#10;                return cell.get_value()&#10;" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="hash_table.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="89" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass" />
                                      <option name="possibleAnswer" value="self._time_queue = Queue(size)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="11" />
                                      <option name="offset" value="153" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="return None" />
                                      <option name="possibleAnswer" value="return self._time_queue.get(key)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="226" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass" />
                                      <option name="possibleAnswer" value="self._time_queue.push(key, value)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="0" />
                                      <option name="offset" value="262" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="" />
                                      <option name="possibleAnswer" value="class Queue:&#10;    class Node:&#10;        def __init__(self, prev, key, value, next):&#10;            self.prev = prev&#10;            self.key = key&#10;            self.value = value&#10;            self.next = next&#10;&#10;    def __init__(self, size):&#10;        self._size = 0&#10;        self._max = size&#10;        self._front = None&#10;        self._rear = None&#10;        self._hashTable = HashTable(100 * size)&#10;&#10;    def push(self, key, value):&#10;        if self._rear is None:&#10;            self._rear = Queue.Node(None, key, value, None)&#10;            self._front = self._rear&#10;        else:&#10;            self._rear.prev = Queue.Node(None, key, value, self._rear)&#10;            self._rear = self._rear.prev&#10;        self._size += 1&#10;        if self._size &gt; self._max:&#10;            self.pop()&#10;        self._hashTable.insert(key, self._rear)&#10;&#10;    def delete(self, key):&#10;        node = self._hashTable.get(key)&#10;        if node.prev is not None:&#10;            node.prev.next = node.next&#10;        else:&#10;            self._rear = node.next&#10;        if node.next is not None:&#10;            node.next.prev = node.prev&#10;        else:&#10;            self._front = node.prev&#10;        self._hashTable.delete(key)&#10;        self._size -= 1&#10;&#10;    def pop(self):&#10;        key = None&#10;        if self._front is not None:&#10;            key = self._front.key&#10;            self._front = self._front.prev&#10;            self._front.next = None&#10;            self._hashTable.delete(key)&#10;        self._size -= 1&#10;        return key&#10;&#10;    def get(self, key):&#10;        node = self._hashTable.get(key)&#10;        if node is not None:&#10;            self.delete(key)&#10;            self.push(key, node.value)&#10;            return node.value&#10;        return None" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="time_limit.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="time_limit.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Hashing(Part 2)" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="8" />
                <option name="name" value="8_DSU" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Disjoint Sets" />
                      <option name="status" value="Failed" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="27" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO" />
                                      <option name="possibleAnswer" value="" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Failed" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="9" />
                <option name="name" value="8_DSU(2)" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Requirements: &lt;br&gt;&#10;Read the DSU notebook. &lt;br&gt;&#10;&#10;&lt;br&gt;&#10;&lt;h1&gt;Vanishing Array&lt;/h1&gt;&#10;&lt;br&gt;&lt;br&gt;&#10;&#10;You are given an array of &lt;strong&gt;n non-negative&lt;/strong&gt; integers. &lt;br&gt;&#10;The integers are vanishing one by one for some unknown reason.&#10;&lt;br&gt;&#10;The order in which they vanish is given to you as a permutation of integers&#10;from 1 to n.&#10;&lt;br&gt;&#10;After each element vanishes you have to find out the maximum sum of unvanished&#10;elements, such that no vanished element is between.&#10;&lt;br&gt;&lt;br&gt;&#10;&#10;&lt;br&gt;&#10;You must fill in the solve function which takes in n, a list of n numbers,&#10;and a list of a permutation 1 to n.&#10;&lt;br&gt;&#10;The function must output a list of answers where the &lt;strong&gt;i&lt;/strong&gt;th&#10;element corresponds to the answer after the first i steps.&#10;&lt;br&gt;&#10;The following conditions are guaranteed:&#10;&lt;p&gt; 1 &amp;le; n &amp;le; 100,000&lt;/p&gt;&#10;&lt;p&gt;0 &amp;le; numbers[i] &amp;le; 1,000,000,000&lt;/p&gt;&#10;&lt;br&gt;&#10;&#10;&lt;h3&gt;Examples&lt;/h3&gt;&#10;&#10;&lt;h4&gt;Example 1&lt;/h4&gt;&#10;n = 4 &lt;br&gt;&#10;numbers = [1,3,2,5] &lt;br&gt;&#10;perm = [3,4,1,2] &lt;br&gt;&#10;output = [5,4,3,0] &lt;br&gt;&#10;&#10;&lt;h4&gt;Example 2&lt;/h4&gt;&#10;n = 5 &lt;br&gt;&#10;numbers = [1,2,3,4,5] &lt;br&gt;&#10;perm = [4,2,3,5,1] &lt;br&gt;&#10;output = [6,5,5,1,0] &lt;br&gt;&#10;&#10;&#10;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&#10;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  Try to think backwards.&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  Instead of vanishing, start at the end. Then the integers are appearing one by one.&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  When an integer appears, you must check both sides to see if they are already here.&#10;  And for each side present, the sum of this block is increased.&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  Blocks are disjoint sets of indices. Some are present. Some are not.&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  Consider a DSU with the numbers 1 - n. Whenever an integer appears,&#10;  you must set it's DSU to present and for each of its sides,&#10;  if it is present, you must unite these two and update this DSU's size&#10;  and sum of integers in the original array.&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  Introduce a local variable as the answer from the end. Every time an&#10;  integer appears, this answer is changed if the sum of the resulting&#10;  DSU is larger than it.&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  When you are adding an integer, the new answer is the maximum of&#10;  the previous answer and the sum of the currently added DSU.&#10;&lt;/div&gt;&#10;&#10;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="1" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="647" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="# TODO" />
                                      <option name="possibleAnswer" value="if u.size &gt; v.size:&#10;            u, v = v, u" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="733" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="# TODO" />
                                      <option name="possibleAnswer" value="u.par = v" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="791" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="# TODO" />
                                      <option name="possibleAnswer" value="v.size += u.size&#10;        v.sum += u.sum" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="12" />
                                      <option name="offset" value="1020" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="# TODO&#10;&#9;pass" />
                                      <option name="possibleAnswer" value="perm2 = [i - 1 for i in perm]&#10;    perm = perm2&#10;    answers = []&#10;    current_answer = 0&#10;    dsu = DisjointSet(n)&#10;&#10;    def add(i, current_answer):&#10;        node = dsu.nodes[i]&#10;        node.added = True&#10;        node.sum = numbers[i]&#10;        if i &gt; 0 and dsu.nodes[i - 1].added:&#10;            dsu.unite(node, dsu.nodes[i - 1])&#10;        if i &lt; n - 1 and dsu.nodes[i + 1].added:&#10;            dsu.unite(node, dsu.nodes[i + 1])&#10;&#10;        parent = dsu.find(node)&#10;        current_answer = max(current_answer, parent.sum)&#10;        return current_answer&#10;&#10;    for i in range(n - 1, -1, -1):&#10;        answers.append(current_answer)&#10;        current_answer = add(perm[i], current_answer)&#10;&#10;    answers.reverse()&#10;    return answers" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Requirements: &lt;br&gt;&#10;Be familiar with the concept of DSU.&#10;&lt;br&gt;&#10;&lt;h1&gt;Matin &amp; Kianoosh&lt;/h1&gt;&#10;&lt;br&gt;&lt;br&gt;&#10;&#10;Matin and Kianoosh are great friends. So great that they always brag about&#10;their points in common to others who couldn't care less. One day, in order&#10;to do this, they decided to wear T-shirts with matching logos. Each logo is&#10;a string of length n with lowercase english letters.&#10;But when they see each other, their strings are different.&#10;&lt;br&gt;&#10;Luckily, a tailor is nearby. The tailor charges 1 dollar for 1 rule. A rule&#10;is a pair of 2 characters. Once a rule is chosen, any of the two that are on either&#10;t-shirts can be changed into one another unlimited amount of times.&#10;&lt;br&gt;&#10;Because Matin and Kianoosh don't like spending money, you must find the&#10;minimum amount of dollars they must spend to make their t-shirts match.&#10;&lt;br&gt;&lt;br&gt;&#10;&#10;&lt;br&gt;&#10;You must fill in the solve function which takes in n, and a, b which are two&#10;strings of length n consisting of lowercase English letters.&#10;&lt;br&gt;&#10;The function outputs a tuple. The first element is the minimum price to pay.&#10;The second is a list of tuples. Each tuple consists of 2 characters and&#10;represent a rule.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&#10;It is known that 1 &amp;le; n &amp;le; 100,000&#10;&lt;br&gt;&#10;&#10;&lt;h3&gt;Examples&lt;/h3&gt;&#10;&#10;&lt;h4&gt;Example 1&lt;/h4&gt;&#10;n = 3 &lt;br&gt;&#10;a = 'abb' &lt;br&gt;&#10;b = 'dad' &lt;br&gt;&#10;output = [2, [('a', 'd'), ('b', 'a')]] &lt;br&gt;&#10;&#10;&lt;h4&gt;Example 2&lt;/h4&gt;&#10;n = 8 &lt;br&gt;&#10;a = 'drpepper' &lt;br&gt;&#10;b = 'cocacola' &lt;br&gt;&#10;output = [7, [('l', 'e'), ('e', 'd'), ('d', 'c'), ('p', 'c'),&#10;('o', 'p'), ('o', 'r'), ('a', 'r')]] &lt;br&gt;&#10;&#10;&#10;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  Try to imagine a rule as a permanent edge between the two characters.&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  If ('a', 'b') and ('a', 'c') are two of the rules do we need ('b', 'c')?&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  In order to be able to change k letters into one another, you'll need k-1 rules.&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  Whenever a rule is added, it works exactly as a union in their respective DSUs.&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  Define a 26 sized DSU. Whenever two characters are different,&#10;  they need to be in the same DSU in the end. So unite them!&#10;&lt;/div&gt;&#10;&#10;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="2" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="12" />
                                      <option name="offset" value="1124" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="# TODO&#10;&#9;pass" />
                                      <option name="possibleAnswer" value="dsu = DisjointSet(26)&#10;    for i in range(n):&#10;        n1 = dsu.nodes[ord(a[i]) - ord('a')]&#10;        n2 = dsu.nodes[ord(b[i]) - ord('a')]&#10;        dsu.union(n1, n2)&#10;    comps = dsu.get_all_components()&#10;&#10;    ans = 26 - len(comps)&#10;    rules = []&#10;    for i in comps:&#10;        if len(i) &gt; 1:&#10;            for j in range(1, len(i)):&#10;                rules.append((chr(ord('a') + i[0]), chr(ord('a') + i[j])))&#10;&#10;    return ans, rules" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Requirements: &lt;br&gt;&#10;Be familiar with the concept of DSU.&#10;&lt;br&gt;&#10;&lt;h1&gt;Slippery slopes&lt;/h1&gt;&#10;&lt;br&gt;&lt;br&gt;&#10;&#10;Kianoosh and n-1 others are trapped in an ice cave. Imagine the cave as a plane. The n people&#10;are standing in n distinct points. Kianoosh decides to go and say hi to each one. But&#10;in order to do so, he can only move up, down, right and left. But the floor is slippery so&#10;he will keep sliding in that direction until he reaches one of the other people who will stop him.&#10;&lt;br&gt;&#10;Unfortunately there might need to be more stopping points in the cave to reach everyone. You&#10;must find the minimum amount of extra stopping points needed to ensure he can reach everyone.&#10;&#10;&lt;br&gt;&#10;You must fill in the solve function which takes in n, and a list of tuples with each points&#10;coordinates.&#10;&lt;br&gt;&#10;The function must output a single number. The minimum amount of extra stopping points needed&#10;to reach every point.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;It is known that 1 &amp;le; n &amp;le; 100, 1 &amp;le; x&lt;sub&gt;i&lt;/sub&gt;, y&lt;sub&gt;i&lt;/sub&gt; &amp;le; 1000&#10;&#10;&lt;br&gt;&#10;&#10;&lt;h3&gt;Examples&lt;/h3&gt;&#10;&#10;&lt;h4&gt;Example 1&lt;/h4&gt;&#10;n = 2 &lt;br&gt;&#10;points = [(2, 1), (1, 2)] &lt;br&gt;&#10;output = 1 &lt;br&gt;&#10;&#10;&lt;h4&gt;Example 2&lt;/h4&gt;&#10;n = 2 &lt;br&gt;&#10;points = [(2, 1), (4, 1)] &lt;br&gt;&#10;output = 0 &lt;br&gt;&#10;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;    If you can get from A to B and from B to C, then you can get from A to C.&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;    Consider points where you can go from each one to the others. What happens if you add a new stop point?&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;    You can go directly from A to B if A.x = B.y or A.y = B.y&#10;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;    Make a new DSU with n sets, each for one point. If you can go directly from A to B, then&#10;    unite their sets. Now how many stopping points do we need?&#10;&lt;/div&gt;&#10;&#10;&#10;&#10;&#10;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="3" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="1064" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="# TODO" />
                                      <option name="possibleAnswer" value="dsu = DisjointSet(n)&#10;    for i in range(n):&#10;        for j in range(i + 1, n):&#10;            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:&#10;                dsu.unite(i, j)&#10;&#10;    return dsu.get_count() - 1" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Requirements: &lt;br&gt;&#10;Be familiar with the concept of DSU.&#10;&lt;br&gt;&#10;&lt;h1&gt;Pricey Walkie-talkie&lt;/h1&gt;&#10;&lt;br&gt;&lt;br&gt;&#10;&#10;Matin and Kianoosh have bought a pair of walkie-talkies. Yet there are some limitations.&#10;They can only send n words through them to the other. And some of the words mean the same thing.&#10;&lt;br&gt;&#10;Kianoosh the ith word has a cost of a&lt;sub&gt;i&lt;/sub&gt; for sending. And he has a message he wants to send.&#10;He can replace each word with any other word with the same meaning. Help kianoosh find the minimum&#10;cost to send his message to Matin.&#10;&#10;&lt;br&gt;&#10;You must fill in the solve function which takes in n, m, a list of words,&#10;a list of costs, and a list of groups and Kianoosh's message.&#10;&lt;br&gt;&lt;br&gt;&#10;n is the total number of words.&#10;&lt;br&gt;&lt;br&gt;&#10;m is the amount of words in Kianoosh's message.&#10;&lt;br&gt;&lt;br&gt;&#10;The list of all the n words and a list of respective prices.&#10;&lt;br&gt;&lt;br&gt;&#10;A list of groups which is a list of tuples where each tuple is the&#10;indices (Index in the above list of words) of words with the same meaning.&#10;&lt;br&gt;&lt;br&gt;&#10;And finally a list of the words in Kianoosh's message.&#10;&lt;br&gt;&lt;br&gt;&#10;The function must output a single integer. The minimum cost.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;It is known that 1 &amp;le; n &amp;le; 10000, 1 &amp;le; m &amp;le; 10000&#10;&#10;&lt;br&gt;&#10;&#10;&lt;h3&gt;Examples&lt;/h3&gt;&#10;&#10;&lt;h4&gt;Example 1&lt;/h4&gt;&#10;n = 2 &lt;br&gt;&#10;points = [(2, 1), (1, 2)] &lt;br&gt;&#10;output = 1 &lt;br&gt;&#10;&#10;&lt;h4&gt;Example 2&lt;/h4&gt;&#10;n = 2 &lt;br&gt;&#10;points = [(2, 1), (4, 1)] &lt;br&gt;&#10;output = 0 &lt;br&gt;&#10;&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;    You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="4" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="1294" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="# TODO" />
                                      <option name="possibleAnswer" value="dsu = DisjointSet(n)&#10;    indices = {}&#10;    for i in range(n):&#10;        dsu.nodes[i].min = prices[i]&#10;        indices[words[i]] = i&#10;&#10;    for group in groups:&#10;        for i in range(len(group)):&#10;            dsu.union(dsu.nodes[group[0]], dsu.nodes[group[i]])&#10;&#10;    price = 0&#10;    for word in message:&#10;        price += dsu.find(dsu.nodes[indices[word]]).min&#10;&#10;    return price" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="10" />
                <option name="name" value="10_Balanced BSTs" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="BBSTs" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="11" />
                <option name="name" value="11_Advanced Data Structures" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Advanced" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="12" />
                <option name="name" value="Example" />
                <option name="stepikChangeStatus" value="Content changed" />
                <option name="updateDate" value="0" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;html&gt;&#10;Prerequisite: &lt;br&gt;&#10;Read the binary search notebook.&lt;br&gt;&lt;br&gt;&#10;&#10;Complete the lower bound function.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;** This is just a simple example of what you can do.&lt;br&gt;&#10;Try your best to come up with good ideas that help students learn better.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;** Try out different approaches.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints (if needed) anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;&lt;/html&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Sample Task" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="27" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="return -1" />
                                      <option name="possibleAnswer" value="if A[0] &gt;= x:&#10;        return -1&#10;    ans = 0&#10;    end = len(A)&#10;    while end &gt; ans + 1:&#10;        mid = ans + end &gt;&gt; 1&#10;&#10;        if A[mid] &gt;= x:&#10;            end = mid&#10;        else:&#10;            ans = mid&#10;    return ans" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="0" />
              </Lesson>
            </list>
          </option>
        </Course>
      </option>
    </StudyTaskManager>
  </component>
</project>